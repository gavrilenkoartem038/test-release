name: Create and Release Tag

on:
  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.commit_sha.outputs.commit_sha }} 
      next_tag: ${{ steps.select_next_tag.outputs.next_tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: 'Get Previous tag'
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
      with:
        fallback: 0.1.0
    
    - name: 'Get next version'
      id: semvers
      uses: "WyriHaximus/github-action-next-semvers@v1"
      with:
        version: ${{ steps.previoustag.outputs.tag }}
  

    - uses: actions/github-script@v7
      id: get_branch_version
      env:
        branch_name: ${{ github.ref_name }}
      with:
        result-encoding: string
        script: |
          const { branch_name } = process.env
          const versionArr = branch_name.split('/')
          const version = `${versionArr[1]}`
          return version

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Select next tag
      id: select_next_tag
      run: |
        TAG=${{ steps.get_branch_version.outputs.result }}
        if git show-ref --tags --verify --quiet "refs/tags/${TAG}"; then
          echo "Tag ${TAG} exists"
          echo "next_tag=${{ steps.semvers.outputs.patch }}" >> "$GITHUB_OUTPUT"
        else
          echo "Tag ${TAG} does not exist"
          echo "next_tag=${TAG}" >> "$GITHUB_OUTPUT"
        fi
    
    - name: 'Update package.json'
      id: create_commit
      uses: BellCubeDev/update-package-version-by-release-tag@v2
      with:
        version: ${{ steps.select_next_tag.outputs.next_tag }}
        ignore-semver-check: "true"
        package-json-path: "./package.json"

    - name: 'Create commit'
      run: |
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
        git config --global user.name "${{ github.actor }}"
        git add .
        git commit -m 'feat: update package.json version to ${{ steps.select_next_tag.outputs.next_tag }}'
        git push
    
    - name: Get commit sha
      id: commit_sha
      run: echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Generate Release Tag
      uses: action-pack/github-release@v2
      with:
        tag: ${{ steps.select_next_tag.outputs.next_tag }}
        title: ${{ steps.select_next_tag.outputs.next_tag }}
        commit: 'main'

  install-dependencies:
    runs-on: ubuntu-22.04
    needs: create_release
    steps:
      - uses: actions/checkout@v4
      - name: Display latest commit
        run: |
          git log
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Display latest commit
        run: |
          git log
      - uses: ./.github/actions/common-steps
      - run: pnpm install --no-frozen-lockfile
  
  build-app:
    needs: [install-dependencies, create_release]
    uses: ./.github/workflows/template-build.yml
    with:
      run: pnpm
      build-script: build
      artifact-name: build-app
      artifact-path: build

  merge-branch:
    runs-on: ubuntu-latest
    needs: [build-app, create_release]
    steps:
      - uses: actions/checkout@v4

      - name: cherry-pick commit
        run: |
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git remote update
          git fetch
          git checkout main
          git cherry-pick ${{ needs.create_release.outputs.commit_sha }}
          git push origin main

  jira-release:
    runs-on: ubuntu-latest
    needs: [merge-branch, create_release]
    steps:
      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"
      - name: Test
        run: echo ${{ steps.date.outputs.date }}

      - name: Create JIRA Release
        id: create-ticket
        run: |
          RESULT=$(curl --request POST \
            --url 'https://gavrilenkoartem039.atlassian.net/rest/api/3/version' \
            --user '${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_TOKEN }}' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --data '{
              "archived": false,
              "name": "${{ needs.create_release.outputs.next_tag }}",
              "projectId": 10000,
              "releaseDate": "${{ steps.date.outputs.date }}",
              "released": false
            }')

          echo "result=$RESULT" >> "$GITHUB_OUTPUT"

      - run: |
          echo Result from the prev step: "${{ steps.create-ticket.outputs.result }}"
      
      - run: | 
          echo Ticket id: ${{ fromJSON(steps.create-ticket.outputs.result).id }}
      
      - name: Update JIRA Release status
        id: update-release
        run: |
          curl --request PUT \
            --url 'https://gavrilenkoartem039.atlassian.net/rest/api/3/version/${{ fromJSON(steps.create-ticket.outputs.result).id }}' \
            --user '${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_TOKEN }}' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --data '{
              "released": true
            }'


          
